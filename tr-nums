#!/usr/bin/env python
import argparse
from fractions import Fraction
from itertools import islice

# from scipy.special import beta
from scipy.special import gamma

DEFAULT_MAX_NUMBERS = 10


def inv_tr_nums(d=Fraction(2), n=Fraction(1)):
    while True:
        # yield d * beta(n, n + d)
        yield 1 / Fraction((gamma(float(n + d)) / (gamma(float(n)) * gamma(
            float(d + 1)))))
        n += 1


def inv_gap_nums(d=Fraction(2), n=Fraction(1)):
    x = -1
    gen_inv_tr_nums = inv_tr_nums(d, n)
    # Skip ahead -- DOES NOT WORK for negative indices!
    for _ in range(int(n - 1)):
        x += next(gen_inv_tr_nums)
    while True:
        x += next(gen_inv_tr_nums)
        yield x


def main():
    def parse_fraction(value):
        try:
            return Fraction(value)
        except ValueError:
            raise argparse.ArgumentTypeError(f"Invalid fraction value: {value}")

    parser = argparse.ArgumentParser(
        description='Generate inverse triangular numbers and their gaps.'
    )
    parser.add_argument(
        '-d',
        '--dimension',
        type=parse_fraction,
        default=Fraction(2),
        metavar='DIM',
        help='generate triangular numbers of DIM dimension'
    )
    parser.add_argument(
        '-i',
        '--starting-index',
        type=parse_fraction,
        default=Fraction(1),
        metavar='INDEX',
        help='start at the INDEX-th triangular number'
    )
    parser.add_argument(
        '-n',
        '--max-numbers',
        type=int,
        default=DEFAULT_MAX_NUMBERS,
        metavar='MAX',
        help='generate only MAX triangular numbers'
    )
    args = parser.parse_args()

    gen = inv_tr_nums(args.dimension, args.starting_index)
    for num in islice(gen, args.max_numbers):
        print(num)
    print('---')
    gen = inv_gap_nums(args.dimension, args.starting_index)
    for num in islice(gen, args.max_numbers + 1):
        print(num)


if __name__ == '__main__':
    main()
