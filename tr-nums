#!/usr/bin/env python

import sys
from argparse import ArgumentParser, ArgumentTypeError
from fractions import Fraction
from functools import lru_cache
from signal import SIGINT, SIGPIPE, SIG_DFL, signal
from sys import argv, stderr, stdout
from typing import Callable, Iterator, NoReturn, Union

import scipy
from numpy import isinf, isnan

FractionStr = Callable[[Fraction], str]
Number = Union[Fraction, float, int]
NumberGenerator = Iterator[Fraction]


@lru_cache(maxsize=None)
def gamma(x: Number) -> float:
    """
    Compute and memoize the Gamma function.
    Note the return type to aid in chaining floating point operations.

    :param x: A value for which to compute the gamma function.
    :type x: Fraction | float | int

    :return: The computed value of Gamma(x).
    :rtype: float

    :raises ValueError: If the computed value is infinite or NaN.

    See also <https://en.wikipedia.org/wiki/Gamma_function>,
    <https://en.wikipedia.org/wiki/Beta_function>.

    :Examples:
    >>> gamma(1)
    1.0
    >>> gamma(2)
    1.0
    >>> gamma(4)
    6.0
    >>> gamma(0)
    Traceback (most recent call last):
        ...
    ValueError: Gamma function explodes at 0
    >>> gamma(-1)
    Traceback (most recent call last):
        ...
    ValueError: Gamma function explodes at -1
    """
    g = scipy.special.gamma(float(x))

    if not isinf(g) and not isnan(g):
        return g

    raise ValueError(f'Gamma function explodes at {x}')


def inv_tr_nums(n: Number, d: Number) -> NumberGenerator:
    """
    Generate inverse triangular numbers.
    Assume no zero or negative integer positions or dimensions.

    :param n: The starting position for the triangular number sequence.
    :type n: Fraction | float | int
    :param d: The dimension for the generalized triangular number.
    :type d: Fraction | float | int

    :return: The next inverse triangular number.
    :rtype: Fraction

    See also <https://oeis.org/A000217>, <https://oeis.org/A000292>.

    :Examples:
    >>> # Standard triangular numbers
    >>> gen = inv_tr_nums(1, 2)
    >>> next(gen)
    Fraction(1, 1)
    >>> next(gen)
    Fraction(1, 3)
    >>> # Standard tetrahedral numbers
    >>> gen = inv_tr_nums(1, 3)
    >>> next(gen)
    Fraction(1, 1)
    >>> next(gen)
    Fraction(1, 4)
    >>> next(gen)
    Fraction(1, 10)
    >>> # Fractional dimension triangular numbers
    >>> gen = inv_tr_nums(2, 2.5)
    >>> next(gen)
    Fraction(2, 7)
    >>> # Negative triangular numbers
    >>> gen = inv_tr_nums(-0.5, 2)
    >>> next(gen)
    Fraction(-2, 1)
    """
    if 2 == d:
        gap_gen = inv_gap_nums(n, d)
        x = -1
        while True:
            y = next(gap_gen)
            yield y - x
            x = y
    else:
        while True:
            # yield d * beta(n, n + d)
            yield 1 / Fraction((gamma(n + d) / (gamma(n) * gamma(d + 1))))
            n += 1


def inv_gap_nums(n: Number, d: Number) -> NumberGenerator:
    """
    Generate the succeeding "gap" number for inverse triangular numbers.
    Assume no zero or negative integer positions or dimensions.

    :param n: The starting position for the succeeding gap number.
    :type n: Fraction | float | int
    :param d: The dimension for the succeeding gap number.
    :type d: Fraction | float | int

    :return: The next succeeding gap number.
    :rtype: Fraction

    :Examples:
    >>> # Standard triangular numbers
    >>> gen = inv_gap_nums(1, 2)
    >>> next(gen)
    Fraction(0, 1)
    >>> next(gen)
    Fraction(1, 3)
    >>> next(gen)
    Fraction(1, 2)
    >>> gen = inv_gap_nums(1, 3)
    >>> next(gen)
    Traceback (most recent call last):
        ...
    NotImplementedError: UNIMPLEMENTED: d == 3
    """

    # TODO: Broken -- only works for 2 dimensions
    if not d == 2:
        raise NotImplementedError(f'UNIMPLEMENTED: d == {d}')

    n = Fraction(n)
    while True:
        yield (n - 1) / (n + 1)
        n += 1


def fraction_str_patch(self: Fraction,
                       original_str: FractionStr = Fraction.__str__) \
        -> str:
    """
    Pretty print by possibly rounding the denominator and reducing to
    simplest form.

    :param self: The fraction to possibly round.
    :type self: Fraction
    :param original_str: Ignore: defaults to the original ``__str__`` method.
    :type original_str: FractionStr

    :return: The possibly rounded fraction as a string.
    :rtype: Fraction

    :Examples:
    >>> fraction_str_patch(Fraction(1, 2))
    '1/2'
    >>> fraction_str_patch(Fraction(101, 323))
    '101/323'
    >>> args.round_fractions = 2
    >>> fraction_str_patch(Fraction(1, 2))
    '1/2'
    >>> fraction_str_patch(Fraction(101, 323))
    '5/16'
    >>> args.floating_point = True
    >>> fraction_str_patch(Fraction(1, 2))
    '0.5'
    >>> fraction_str_patch(Fraction(101, 323))
    '0.3126934984520124'
    """
    if args.floating_point:
        return str(float(self))
    elif args.round_fractions is None:
        return original_str(self)
    else:
        return original_str(self.limit_denominator(10 ** args.round_fractions))


def setup_globals():  # pragma: no cover
    # Be nice about ^C and pipes
    signal(SIGINT, SIG_DFL)
    signal(SIGPIPE, SIG_DFL)

    # Turn tracebacks to standard script error messages
    if not args.debug:
        def handle_exceptions(_, exception, __) -> NoReturn:
            print(f'{argv[0]}: {type(exception).__name__}: {exception}',
                  file=stderr)
            exit(1)

        sys.excepthook = handle_exceptions

    # Monkey patch Fraction to respect rounding flags
    Fraction.__str__ = fraction_str_patch


def main():  # pragma: no cover
    setup_globals()

    start = args.start
    dimension = args.dimension

    tr_gen = inv_tr_nums(start, dimension)
    gap_gen = inv_gap_nums(start, dimension)

    while True:
        if 2 == dimension:
            gap = next(gap_gen)
        else:
            gap = '-'
        print(f'{next(tr_gen)} {gap}')
        stdout.flush()


def parse_fraction(value: str, zero_ok: bool) -> Fraction:
    """
    Parse a potential fraction.
    Values cannot be zero or negative integers (Gamma function explodes).

    :param value: The number-like string to turn into a fraction.
    :type value: Str
    :param zero_ok: Parse 0 without raising an exception.
    :type zero_ok: bool

    :return: The corresponding fraction.
    :rtype: Fraction

    :raises ValueError: If the value is a negative integer.
    :raises ValueError: If the value is zero and ``zero_ok`` is ``False``.

    :Examples:
    >>> parse_fraction('1', True)
    Fraction(1, 1)
    >>> parse_fraction('1/2', True)
    Fraction(1, 2)
    >>> parse_fraction('-0.5', True)
    Fraction(-1, 2)
    >>> parse_fraction('0', True)
    Fraction(0, 1)
    >>> parse_fraction('0', False)
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: zero and negative integers explode: 0
    >>> parse_fraction('-1', True)
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: negative integers explode: -1
    >>> parse_fraction('-1', False)
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: zero and negative integers explode: -1
    >>> parse_fraction('pi', True)
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: Invalid fraction value: pi
    >>> parse_fraction('pi', False)
    Traceback (most recent call last):
        ...
    argparse.ArgumentTypeError: Invalid fraction value: pi
    """
    try:
        f = Fraction(value)

        if not f.is_integer():
            return f
        if f > 0:
            return f
        if zero_ok and f == 0:
            return f

        if zero_ok:
            raise ArgumentTypeError(f'negative integers explode: {value}')
        raise ArgumentTypeError(f'zero and negative integers explode: {value}')
    except ValueError:
        raise ArgumentTypeError(f'Invalid fraction value: {value}')


def parse_args():  # pragma: no cover
    parser = ArgumentParser(
        description='Print inverse triangular numbers and their gaps.'
    )
    group = parser.add_mutually_exclusive_group()

    group.add_argument(
        '--debug',
        action='store_true',
        help='print stack traces on error'
    )
    parser.add_argument(
        '-d',
        '--dimension',
        type=lambda d: parse_fraction(d, zero_ok=True),
        default=2,
        metavar='DIM',
        help='generate %(metavar)s-dimensional triangular numbers, can be '
             'non-integral (default: %(default)s)'
    )
    group.add_argument(
        '-f',
        '--floating-point',
        action='store_true',
        help='print floating point numbers instead of fractions'
    )
    parser.add_argument(
        '-n',
        '--start',
        type=lambda n: parse_fraction(n, zero_ok=False),
        default=1,
        metavar='POS',
        help='start at the %(metavar)s-th triangular number, can be '
             'non-integral (default: %(default)s)'
    )
    group.add_argument(
        '-r',
        '--round-fractions',
        type=int,
        default=None,
        metavar='DIGITS',
        help='round floating point denominators to %(metavar)s digits'
    )
    parser.add_argument(
        '-T',
        '--unit-tests',
        action='store_true',
        help='run unit tests instead of printing'
    )

    return parser.parse_args()


def unit_tests():
    from doctest import testmod
    testmod()


if __name__ == '__main__':
    args = parse_args()

    if args.unit_tests:
        unit_tests()
    else:
        main()  # pragma: no cover
